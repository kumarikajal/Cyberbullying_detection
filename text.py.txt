#!/usr/bin/env python3
# coding: utf-8
from keras.preprocessing.text import Tokenizer

from keras.preprocessing.sequence import pad_sequences

from keras.models import Sequential

from keras.layers import Dense, Flatten, LSTM, Conv1D, MaxPooling1D, Dropout, Activation

from keras.layers.embeddings import Embedding

## Plotly

import plotly.offline as py

import plotly.graph_objs as go

py.init_notebook_mode(connected=True)

# Others
import re

from nltk.stem.snowball import SnowballStemmer

import nltk

import string

import numpy as np

import pandas as pd

from nltk.corpus import stopwords



from sklearn.manifold import TSNE

##Data Processing-1. Remove numeric and empty texts



df = pd.read_csv('projlabel.csv', names = ['label', 'text', 'id'])

df= df.dropna()

df = df[df.label.apply(lambda x: x !="")]

df = df[df.text.apply(lambda x: x !="")]

labels=df['label'].map(lambda x : 1 if int(x) > 0 else 0)



def clean_text(text):

    

    ## Remove puncuation


    

    ## Convert words to lower case and split them

    text = text.lower().split()

    

    ## Remove stop words

    stops = set(stopwords.words("english"))

    text = [w for w in text if not w in stops and len(w) >= 3]

    

    text = " ".join(text)

    ## Clean the text

    text = re.sub(r"[^A-Za-z0-9^,!.\/'+-=]", " ", text)

    text = re.sub(r"what's", "what is ", text)

    text = re.sub(r"\'s", " ", text)

    text = re.sub(r"\'ve", " have ", text)

    text = re.sub(r"n't", " not ", text)

    text = re.sub(r"i'm", "i am ", text)

    text = re.sub(r"\'re", " are ", text)

    text = re.sub(r"\'d", " would ", text)

    text = re.sub(r"\'ll", " will ", text)

    text = re.sub(r",", " ", text)

    text = re.sub(r"\.", " ", text)

    text = re.sub(r"!", " ! ", text)

    text = re.sub(r"\/", " ", text)

    text = re.sub(r"\^", " ^ ", text)

    text = re.sub(r"\+", " + ", text)

    text = re.sub(r"\-", " - ", text)

    text = re.sub(r"\=", " = ", text)

    text = re.sub(r"'", " ", text)

    text = re.sub(r"(\d+)(k)", r"\g<1>000", text)

    text = re.sub(r":", " : ", text)

    text = re.sub(r" e g ", " eg ", text)

    text = re.sub(r" b g ", " bg ", text)

    text = re.sub(r" u s ", " american ", text)

    text = re.sub(r"\0s", "0", text)

    text = re.sub(r" 9 11 ", "911", text)

    text = re.sub(r"e - mail", "email", text)

    text = re.sub(r"j k", "jk", text)

    text = re.sub(r"\s{2,}", " ", text)

    ## Stemming

    text = text.split()

    stemmer = SnowballStemmer('english')

    stemmed_words = [stemmer.stem(word) for word in text]

    text = " ".join(stemmed_words)

    return text

## apply the above function to df['text']

df['text'] = df['text'].map(lambda x: clean_text(x))



### Create sequence

vocabulary_size = 20000

tokenizer = Tokenizer(num_words= vocabulary_size)

tokenizer.fit_on_texts(df['text'])

sequences = tokenizer.texts_to_sequences(df['text'])

data = pad_sequences(sequences, maxlen=50)



def create_conv_model():

    model_conv = Sequential()

    model_conv.add(Embedding(vocabulary_size, 100, input_length=50))

    model_conv.add(Dropout(0.2))

    model_conv.add(Conv1D(64, 5, activation='relu'))

    model_conv.add(MaxPooling1D(pool_size=4))

    model_conv.add(LSTM(100))

    model_conv.add(Dense(1, activation='sigmoid'))

    model_conv.compile(loss='binary_crossentropy', optimizer='adam',    metrics=['accuracy'])

    return model_conv

model_conv = create_conv_model()

model_conv.fit(data, np.array(labels), validation_split=0.4, epochs = 3)

